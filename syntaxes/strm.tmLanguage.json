{
  "name": "vor-stream",
  "fileTypes": ["strm"],
  "scopeName": "source.process",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.process",
          "match": "(?<!:)//.*$"
        },
        {
          "name": "comment.block.process",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.process",
          "match": "^[ \\t]*(?i)\\b(PROCESS|SUBPROCESS|IN|OUT|INPUT|OUTPUT|NODE|SQL|SAS|TYPE|NAME|DESCR|LABEL)\\b"
        },
        {
          "name": "keyword.other.process",
          "match": "(?i)\\b(LANG|PREDICT|SELECT|WHERE|NAME|DESCR|DELIM|FRAMEWORK|EXEC_WHEN|GETFACT|SETFACT|GETSIG|SETSIG|GETDYN|SETDYN|SYNTAX_VERSION|MODE|APPEND|REPLACE|LABEL)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.process",
          "match": "(?i)\\b(MODEL|REPORT|DEFAULT|MEMORY|TIME|PYTHON|GO)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.process",
          "match": "(->|=|\\{|\\}|\\(|\\)|,|\\.|;)"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.process",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.process",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.process",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.process",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.process",
          "match": "-?\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.process",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}
